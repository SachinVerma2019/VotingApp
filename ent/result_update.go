// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"voting-app/ent/predicate"
	"voting-app/ent/result"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResultUpdate is the builder for updating Result entities.
type ResultUpdate struct {
	config
	hooks    []Hook
	mutation *ResultMutation
}

// Where appends a list predicates to the ResultUpdate builder.
func (ru *ResultUpdate) Where(ps ...predicate.Result) *ResultUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUserid sets the "userid" field.
func (ru *ResultUpdate) SetUserid(i int) *ResultUpdate {
	ru.mutation.ResetUserid()
	ru.mutation.SetUserid(i)
	return ru
}

// SetNillableUserid sets the "userid" field if the given value is not nil.
func (ru *ResultUpdate) SetNillableUserid(i *int) *ResultUpdate {
	if i != nil {
		ru.SetUserid(*i)
	}
	return ru
}

// AddUserid adds i to the "userid" field.
func (ru *ResultUpdate) AddUserid(i int) *ResultUpdate {
	ru.mutation.AddUserid(i)
	return ru
}

// SetPollid sets the "pollid" field.
func (ru *ResultUpdate) SetPollid(i int) *ResultUpdate {
	ru.mutation.ResetPollid()
	ru.mutation.SetPollid(i)
	return ru
}

// SetNillablePollid sets the "pollid" field if the given value is not nil.
func (ru *ResultUpdate) SetNillablePollid(i *int) *ResultUpdate {
	if i != nil {
		ru.SetPollid(*i)
	}
	return ru
}

// AddPollid adds i to the "pollid" field.
func (ru *ResultUpdate) AddPollid(i int) *ResultUpdate {
	ru.mutation.AddPollid(i)
	return ru
}

// SetOption sets the "option" field.
func (ru *ResultUpdate) SetOption(s string) *ResultUpdate {
	ru.mutation.SetOption(s)
	return ru
}

// SetNillableOption sets the "option" field if the given value is not nil.
func (ru *ResultUpdate) SetNillableOption(s *string) *ResultUpdate {
	if s != nil {
		ru.SetOption(*s)
	}
	return ru
}

// SetCreatetime sets the "createtime" field.
func (ru *ResultUpdate) SetCreatetime(t time.Time) *ResultUpdate {
	ru.mutation.SetCreatetime(t)
	return ru
}

// SetNillableCreatetime sets the "createtime" field if the given value is not nil.
func (ru *ResultUpdate) SetNillableCreatetime(t *time.Time) *ResultUpdate {
	if t != nil {
		ru.SetCreatetime(*t)
	}
	return ru
}

// SetModifytime sets the "modifytime" field.
func (ru *ResultUpdate) SetModifytime(t time.Time) *ResultUpdate {
	ru.mutation.SetModifytime(t)
	return ru
}

// SetNillableModifytime sets the "modifytime" field if the given value is not nil.
func (ru *ResultUpdate) SetNillableModifytime(t *time.Time) *ResultUpdate {
	if t != nil {
		ru.SetModifytime(*t)
	}
	return ru
}

// Mutation returns the ResultMutation object of the builder.
func (ru *ResultUpdate) Mutation() *ResultMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResultUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResultMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResultUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResultUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResultUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   result.Table,
			Columns: result.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: result.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Userid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: result.FieldUserid,
		})
	}
	if value, ok := ru.mutation.AddedUserid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: result.FieldUserid,
		})
	}
	if value, ok := ru.mutation.Pollid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: result.FieldPollid,
		})
	}
	if value, ok := ru.mutation.AddedPollid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: result.FieldPollid,
		})
	}
	if value, ok := ru.mutation.Option(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: result.FieldOption,
		})
	}
	if value, ok := ru.mutation.Createtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: result.FieldCreatetime,
		})
	}
	if value, ok := ru.mutation.Modifytime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: result.FieldModifytime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{result.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ResultUpdateOne is the builder for updating a single Result entity.
type ResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResultMutation
}

// SetUserid sets the "userid" field.
func (ruo *ResultUpdateOne) SetUserid(i int) *ResultUpdateOne {
	ruo.mutation.ResetUserid()
	ruo.mutation.SetUserid(i)
	return ruo
}

// SetNillableUserid sets the "userid" field if the given value is not nil.
func (ruo *ResultUpdateOne) SetNillableUserid(i *int) *ResultUpdateOne {
	if i != nil {
		ruo.SetUserid(*i)
	}
	return ruo
}

// AddUserid adds i to the "userid" field.
func (ruo *ResultUpdateOne) AddUserid(i int) *ResultUpdateOne {
	ruo.mutation.AddUserid(i)
	return ruo
}

// SetPollid sets the "pollid" field.
func (ruo *ResultUpdateOne) SetPollid(i int) *ResultUpdateOne {
	ruo.mutation.ResetPollid()
	ruo.mutation.SetPollid(i)
	return ruo
}

// SetNillablePollid sets the "pollid" field if the given value is not nil.
func (ruo *ResultUpdateOne) SetNillablePollid(i *int) *ResultUpdateOne {
	if i != nil {
		ruo.SetPollid(*i)
	}
	return ruo
}

// AddPollid adds i to the "pollid" field.
func (ruo *ResultUpdateOne) AddPollid(i int) *ResultUpdateOne {
	ruo.mutation.AddPollid(i)
	return ruo
}

// SetOption sets the "option" field.
func (ruo *ResultUpdateOne) SetOption(s string) *ResultUpdateOne {
	ruo.mutation.SetOption(s)
	return ruo
}

// SetNillableOption sets the "option" field if the given value is not nil.
func (ruo *ResultUpdateOne) SetNillableOption(s *string) *ResultUpdateOne {
	if s != nil {
		ruo.SetOption(*s)
	}
	return ruo
}

// SetCreatetime sets the "createtime" field.
func (ruo *ResultUpdateOne) SetCreatetime(t time.Time) *ResultUpdateOne {
	ruo.mutation.SetCreatetime(t)
	return ruo
}

// SetNillableCreatetime sets the "createtime" field if the given value is not nil.
func (ruo *ResultUpdateOne) SetNillableCreatetime(t *time.Time) *ResultUpdateOne {
	if t != nil {
		ruo.SetCreatetime(*t)
	}
	return ruo
}

// SetModifytime sets the "modifytime" field.
func (ruo *ResultUpdateOne) SetModifytime(t time.Time) *ResultUpdateOne {
	ruo.mutation.SetModifytime(t)
	return ruo
}

// SetNillableModifytime sets the "modifytime" field if the given value is not nil.
func (ruo *ResultUpdateOne) SetNillableModifytime(t *time.Time) *ResultUpdateOne {
	if t != nil {
		ruo.SetModifytime(*t)
	}
	return ruo
}

// Mutation returns the ResultMutation object of the builder.
func (ruo *ResultUpdateOne) Mutation() *ResultMutation {
	return ruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResultUpdateOne) Select(field string, fields ...string) *ResultUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Result entity.
func (ruo *ResultUpdateOne) Save(ctx context.Context) (*Result, error) {
	var (
		err  error
		node *Result
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResultMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResultUpdateOne) SaveX(ctx context.Context) *Result {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResultUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResultUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ResultUpdateOne) sqlSave(ctx context.Context) (_node *Result, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   result.Table,
			Columns: result.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: result.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Result.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, result.FieldID)
		for _, f := range fields {
			if !result.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != result.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Userid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: result.FieldUserid,
		})
	}
	if value, ok := ruo.mutation.AddedUserid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: result.FieldUserid,
		})
	}
	if value, ok := ruo.mutation.Pollid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: result.FieldPollid,
		})
	}
	if value, ok := ruo.mutation.AddedPollid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: result.FieldPollid,
		})
	}
	if value, ok := ruo.mutation.Option(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: result.FieldOption,
		})
	}
	if value, ok := ruo.mutation.Createtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: result.FieldCreatetime,
		})
	}
	if value, ok := ruo.mutation.Modifytime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: result.FieldModifytime,
		})
	}
	_node = &Result{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{result.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
