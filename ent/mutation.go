// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"
	"voting-app/ent/poll"
	"voting-app/ent/predicate"
	"voting-app/ent/result"
	"voting-app/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePoll   = "Poll"
	TypeResult = "Result"
	TypeUser   = "User"
)

// PollMutation represents an operation that mutates the Poll nodes in the graph.
type PollMutation struct {
	config
	op            Op
	typ           string
	id            *int
	ownerid       *int
	addownerid    *int
	topic         *string
	options       *[]string
	createtime    *time.Time
	modifytime    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Poll, error)
	predicates    []predicate.Poll
}

var _ ent.Mutation = (*PollMutation)(nil)

// pollOption allows management of the mutation configuration using functional options.
type pollOption func(*PollMutation)

// newPollMutation creates new mutation for the Poll entity.
func newPollMutation(c config, op Op, opts ...pollOption) *PollMutation {
	m := &PollMutation{
		config:        c,
		op:            op,
		typ:           TypePoll,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPollID sets the ID field of the mutation.
func withPollID(id int) pollOption {
	return func(m *PollMutation) {
		var (
			err   error
			once  sync.Once
			value *Poll
		)
		m.oldValue = func(ctx context.Context) (*Poll, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Poll.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPoll sets the old Poll of the mutation.
func withPoll(node *Poll) pollOption {
	return func(m *PollMutation) {
		m.oldValue = func(context.Context) (*Poll, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PollMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PollMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PollMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetOwnerid sets the "ownerid" field.
func (m *PollMutation) SetOwnerid(i int) {
	m.ownerid = &i
	m.addownerid = nil
}

// Ownerid returns the value of the "ownerid" field in the mutation.
func (m *PollMutation) Ownerid() (r int, exists bool) {
	v := m.ownerid
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerid returns the old "ownerid" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldOwnerid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOwnerid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOwnerid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerid: %w", err)
	}
	return oldValue.Ownerid, nil
}

// AddOwnerid adds i to the "ownerid" field.
func (m *PollMutation) AddOwnerid(i int) {
	if m.addownerid != nil {
		*m.addownerid += i
	} else {
		m.addownerid = &i
	}
}

// AddedOwnerid returns the value that was added to the "ownerid" field in this mutation.
func (m *PollMutation) AddedOwnerid() (r int, exists bool) {
	v := m.addownerid
	if v == nil {
		return
	}
	return *v, true
}

// ResetOwnerid resets all changes to the "ownerid" field.
func (m *PollMutation) ResetOwnerid() {
	m.ownerid = nil
	m.addownerid = nil
}

// SetTopic sets the "topic" field.
func (m *PollMutation) SetTopic(s string) {
	m.topic = &s
}

// Topic returns the value of the "topic" field in the mutation.
func (m *PollMutation) Topic() (r string, exists bool) {
	v := m.topic
	if v == nil {
		return
	}
	return *v, true
}

// OldTopic returns the old "topic" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldTopic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTopic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTopic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopic: %w", err)
	}
	return oldValue.Topic, nil
}

// ResetTopic resets all changes to the "topic" field.
func (m *PollMutation) ResetTopic() {
	m.topic = nil
}

// SetOptions sets the "options" field.
func (m *PollMutation) SetOptions(s []string) {
	m.options = &s
}

// Options returns the value of the "options" field in the mutation.
func (m *PollMutation) Options() (r []string, exists bool) {
	v := m.options
	if v == nil {
		return
	}
	return *v, true
}

// OldOptions returns the old "options" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldOptions(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOptions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOptions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOptions: %w", err)
	}
	return oldValue.Options, nil
}

// ClearOptions clears the value of the "options" field.
func (m *PollMutation) ClearOptions() {
	m.options = nil
	m.clearedFields[poll.FieldOptions] = struct{}{}
}

// OptionsCleared returns if the "options" field was cleared in this mutation.
func (m *PollMutation) OptionsCleared() bool {
	_, ok := m.clearedFields[poll.FieldOptions]
	return ok
}

// ResetOptions resets all changes to the "options" field.
func (m *PollMutation) ResetOptions() {
	m.options = nil
	delete(m.clearedFields, poll.FieldOptions)
}

// SetCreatetime sets the "createtime" field.
func (m *PollMutation) SetCreatetime(t time.Time) {
	m.createtime = &t
}

// Createtime returns the value of the "createtime" field in the mutation.
func (m *PollMutation) Createtime() (r time.Time, exists bool) {
	v := m.createtime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatetime returns the old "createtime" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldCreatetime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatetime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatetime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatetime: %w", err)
	}
	return oldValue.Createtime, nil
}

// ResetCreatetime resets all changes to the "createtime" field.
func (m *PollMutation) ResetCreatetime() {
	m.createtime = nil
}

// SetModifytime sets the "modifytime" field.
func (m *PollMutation) SetModifytime(t time.Time) {
	m.modifytime = &t
}

// Modifytime returns the value of the "modifytime" field in the mutation.
func (m *PollMutation) Modifytime() (r time.Time, exists bool) {
	v := m.modifytime
	if v == nil {
		return
	}
	return *v, true
}

// OldModifytime returns the old "modifytime" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldModifytime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModifytime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModifytime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifytime: %w", err)
	}
	return oldValue.Modifytime, nil
}

// ResetModifytime resets all changes to the "modifytime" field.
func (m *PollMutation) ResetModifytime() {
	m.modifytime = nil
}

// Where appends a list predicates to the PollMutation builder.
func (m *PollMutation) Where(ps ...predicate.Poll) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PollMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Poll).
func (m *PollMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PollMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.ownerid != nil {
		fields = append(fields, poll.FieldOwnerid)
	}
	if m.topic != nil {
		fields = append(fields, poll.FieldTopic)
	}
	if m.options != nil {
		fields = append(fields, poll.FieldOptions)
	}
	if m.createtime != nil {
		fields = append(fields, poll.FieldCreatetime)
	}
	if m.modifytime != nil {
		fields = append(fields, poll.FieldModifytime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PollMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case poll.FieldOwnerid:
		return m.Ownerid()
	case poll.FieldTopic:
		return m.Topic()
	case poll.FieldOptions:
		return m.Options()
	case poll.FieldCreatetime:
		return m.Createtime()
	case poll.FieldModifytime:
		return m.Modifytime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PollMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case poll.FieldOwnerid:
		return m.OldOwnerid(ctx)
	case poll.FieldTopic:
		return m.OldTopic(ctx)
	case poll.FieldOptions:
		return m.OldOptions(ctx)
	case poll.FieldCreatetime:
		return m.OldCreatetime(ctx)
	case poll.FieldModifytime:
		return m.OldModifytime(ctx)
	}
	return nil, fmt.Errorf("unknown Poll field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PollMutation) SetField(name string, value ent.Value) error {
	switch name {
	case poll.FieldOwnerid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerid(v)
		return nil
	case poll.FieldTopic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopic(v)
		return nil
	case poll.FieldOptions:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOptions(v)
		return nil
	case poll.FieldCreatetime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatetime(v)
		return nil
	case poll.FieldModifytime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifytime(v)
		return nil
	}
	return fmt.Errorf("unknown Poll field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PollMutation) AddedFields() []string {
	var fields []string
	if m.addownerid != nil {
		fields = append(fields, poll.FieldOwnerid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PollMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case poll.FieldOwnerid:
		return m.AddedOwnerid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PollMutation) AddField(name string, value ent.Value) error {
	switch name {
	case poll.FieldOwnerid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOwnerid(v)
		return nil
	}
	return fmt.Errorf("unknown Poll numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PollMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(poll.FieldOptions) {
		fields = append(fields, poll.FieldOptions)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PollMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PollMutation) ClearField(name string) error {
	switch name {
	case poll.FieldOptions:
		m.ClearOptions()
		return nil
	}
	return fmt.Errorf("unknown Poll nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PollMutation) ResetField(name string) error {
	switch name {
	case poll.FieldOwnerid:
		m.ResetOwnerid()
		return nil
	case poll.FieldTopic:
		m.ResetTopic()
		return nil
	case poll.FieldOptions:
		m.ResetOptions()
		return nil
	case poll.FieldCreatetime:
		m.ResetCreatetime()
		return nil
	case poll.FieldModifytime:
		m.ResetModifytime()
		return nil
	}
	return fmt.Errorf("unknown Poll field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PollMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PollMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PollMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PollMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PollMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PollMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PollMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Poll unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PollMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Poll edge %s", name)
}

// ResultMutation represents an operation that mutates the Result nodes in the graph.
type ResultMutation struct {
	config
	op            Op
	typ           string
	id            *int
	userid        *int
	adduserid     *int
	pollid        *int
	addpollid     *int
	option        *string
	createtime    *time.Time
	modifytime    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Result, error)
	predicates    []predicate.Result
}

var _ ent.Mutation = (*ResultMutation)(nil)

// resultOption allows management of the mutation configuration using functional options.
type resultOption func(*ResultMutation)

// newResultMutation creates new mutation for the Result entity.
func newResultMutation(c config, op Op, opts ...resultOption) *ResultMutation {
	m := &ResultMutation{
		config:        c,
		op:            op,
		typ:           TypeResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResultID sets the ID field of the mutation.
func withResultID(id int) resultOption {
	return func(m *ResultMutation) {
		var (
			err   error
			once  sync.Once
			value *Result
		)
		m.oldValue = func(ctx context.Context) (*Result, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Result.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResult sets the old Result of the mutation.
func withResult(node *Result) resultOption {
	return func(m *ResultMutation) {
		m.oldValue = func(context.Context) (*Result, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserid sets the "userid" field.
func (m *ResultMutation) SetUserid(i int) {
	m.userid = &i
	m.adduserid = nil
}

// Userid returns the value of the "userid" field in the mutation.
func (m *ResultMutation) Userid() (r int, exists bool) {
	v := m.userid
	if v == nil {
		return
	}
	return *v, true
}

// OldUserid returns the old "userid" field's value of the Result entity.
// If the Result object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResultMutation) OldUserid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserid: %w", err)
	}
	return oldValue.Userid, nil
}

// AddUserid adds i to the "userid" field.
func (m *ResultMutation) AddUserid(i int) {
	if m.adduserid != nil {
		*m.adduserid += i
	} else {
		m.adduserid = &i
	}
}

// AddedUserid returns the value that was added to the "userid" field in this mutation.
func (m *ResultMutation) AddedUserid() (r int, exists bool) {
	v := m.adduserid
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserid resets all changes to the "userid" field.
func (m *ResultMutation) ResetUserid() {
	m.userid = nil
	m.adduserid = nil
}

// SetPollid sets the "pollid" field.
func (m *ResultMutation) SetPollid(i int) {
	m.pollid = &i
	m.addpollid = nil
}

// Pollid returns the value of the "pollid" field in the mutation.
func (m *ResultMutation) Pollid() (r int, exists bool) {
	v := m.pollid
	if v == nil {
		return
	}
	return *v, true
}

// OldPollid returns the old "pollid" field's value of the Result entity.
// If the Result object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResultMutation) OldPollid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPollid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPollid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPollid: %w", err)
	}
	return oldValue.Pollid, nil
}

// AddPollid adds i to the "pollid" field.
func (m *ResultMutation) AddPollid(i int) {
	if m.addpollid != nil {
		*m.addpollid += i
	} else {
		m.addpollid = &i
	}
}

// AddedPollid returns the value that was added to the "pollid" field in this mutation.
func (m *ResultMutation) AddedPollid() (r int, exists bool) {
	v := m.addpollid
	if v == nil {
		return
	}
	return *v, true
}

// ResetPollid resets all changes to the "pollid" field.
func (m *ResultMutation) ResetPollid() {
	m.pollid = nil
	m.addpollid = nil
}

// SetOption sets the "option" field.
func (m *ResultMutation) SetOption(s string) {
	m.option = &s
}

// Option returns the value of the "option" field in the mutation.
func (m *ResultMutation) Option() (r string, exists bool) {
	v := m.option
	if v == nil {
		return
	}
	return *v, true
}

// OldOption returns the old "option" field's value of the Result entity.
// If the Result object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResultMutation) OldOption(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOption is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOption requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOption: %w", err)
	}
	return oldValue.Option, nil
}

// ResetOption resets all changes to the "option" field.
func (m *ResultMutation) ResetOption() {
	m.option = nil
}

// SetCreatetime sets the "createtime" field.
func (m *ResultMutation) SetCreatetime(t time.Time) {
	m.createtime = &t
}

// Createtime returns the value of the "createtime" field in the mutation.
func (m *ResultMutation) Createtime() (r time.Time, exists bool) {
	v := m.createtime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatetime returns the old "createtime" field's value of the Result entity.
// If the Result object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResultMutation) OldCreatetime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatetime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatetime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatetime: %w", err)
	}
	return oldValue.Createtime, nil
}

// ResetCreatetime resets all changes to the "createtime" field.
func (m *ResultMutation) ResetCreatetime() {
	m.createtime = nil
}

// SetModifytime sets the "modifytime" field.
func (m *ResultMutation) SetModifytime(t time.Time) {
	m.modifytime = &t
}

// Modifytime returns the value of the "modifytime" field in the mutation.
func (m *ResultMutation) Modifytime() (r time.Time, exists bool) {
	v := m.modifytime
	if v == nil {
		return
	}
	return *v, true
}

// OldModifytime returns the old "modifytime" field's value of the Result entity.
// If the Result object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResultMutation) OldModifytime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldModifytime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldModifytime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifytime: %w", err)
	}
	return oldValue.Modifytime, nil
}

// ResetModifytime resets all changes to the "modifytime" field.
func (m *ResultMutation) ResetModifytime() {
	m.modifytime = nil
}

// Where appends a list predicates to the ResultMutation builder.
func (m *ResultMutation) Where(ps ...predicate.Result) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ResultMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Result).
func (m *ResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ResultMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.userid != nil {
		fields = append(fields, result.FieldUserid)
	}
	if m.pollid != nil {
		fields = append(fields, result.FieldPollid)
	}
	if m.option != nil {
		fields = append(fields, result.FieldOption)
	}
	if m.createtime != nil {
		fields = append(fields, result.FieldCreatetime)
	}
	if m.modifytime != nil {
		fields = append(fields, result.FieldModifytime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ResultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case result.FieldUserid:
		return m.Userid()
	case result.FieldPollid:
		return m.Pollid()
	case result.FieldOption:
		return m.Option()
	case result.FieldCreatetime:
		return m.Createtime()
	case result.FieldModifytime:
		return m.Modifytime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case result.FieldUserid:
		return m.OldUserid(ctx)
	case result.FieldPollid:
		return m.OldPollid(ctx)
	case result.FieldOption:
		return m.OldOption(ctx)
	case result.FieldCreatetime:
		return m.OldCreatetime(ctx)
	case result.FieldModifytime:
		return m.OldModifytime(ctx)
	}
	return nil, fmt.Errorf("unknown Result field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case result.FieldUserid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserid(v)
		return nil
	case result.FieldPollid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPollid(v)
		return nil
	case result.FieldOption:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOption(v)
		return nil
	case result.FieldCreatetime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatetime(v)
		return nil
	case result.FieldModifytime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifytime(v)
		return nil
	}
	return fmt.Errorf("unknown Result field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ResultMutation) AddedFields() []string {
	var fields []string
	if m.adduserid != nil {
		fields = append(fields, result.FieldUserid)
	}
	if m.addpollid != nil {
		fields = append(fields, result.FieldPollid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ResultMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case result.FieldUserid:
		return m.AddedUserid()
	case result.FieldPollid:
		return m.AddedPollid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResultMutation) AddField(name string, value ent.Value) error {
	switch name {
	case result.FieldUserid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserid(v)
		return nil
	case result.FieldPollid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPollid(v)
		return nil
	}
	return fmt.Errorf("unknown Result numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ResultMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResultMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Result nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ResultMutation) ResetField(name string) error {
	switch name {
	case result.FieldUserid:
		m.ResetUserid()
		return nil
	case result.FieldPollid:
		m.ResetPollid()
		return nil
	case result.FieldOption:
		m.ResetOption()
		return nil
	case result.FieldCreatetime:
		m.ResetCreatetime()
		return nil
	case result.FieldModifytime:
		m.ResetModifytime()
		return nil
	}
	return fmt.Errorf("unknown Result field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ResultMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ResultMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ResultMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Result unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ResultMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Result edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	email         *string
	password      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
