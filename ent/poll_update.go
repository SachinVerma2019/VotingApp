// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"voting-app/ent/poll"
	"voting-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PollUpdate is the builder for updating Poll entities.
type PollUpdate struct {
	config
	hooks    []Hook
	mutation *PollMutation
}

// Where appends a list predicates to the PollUpdate builder.
func (pu *PollUpdate) Where(ps ...predicate.Poll) *PollUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetOwnerid sets the "ownerid" field.
func (pu *PollUpdate) SetOwnerid(i int) *PollUpdate {
	pu.mutation.ResetOwnerid()
	pu.mutation.SetOwnerid(i)
	return pu
}

// SetNillableOwnerid sets the "ownerid" field if the given value is not nil.
func (pu *PollUpdate) SetNillableOwnerid(i *int) *PollUpdate {
	if i != nil {
		pu.SetOwnerid(*i)
	}
	return pu
}

// AddOwnerid adds i to the "ownerid" field.
func (pu *PollUpdate) AddOwnerid(i int) *PollUpdate {
	pu.mutation.AddOwnerid(i)
	return pu
}

// SetTopic sets the "topic" field.
func (pu *PollUpdate) SetTopic(s string) *PollUpdate {
	pu.mutation.SetTopic(s)
	return pu
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (pu *PollUpdate) SetNillableTopic(s *string) *PollUpdate {
	if s != nil {
		pu.SetTopic(*s)
	}
	return pu
}

// SetOptions sets the "options" field.
func (pu *PollUpdate) SetOptions(s []string) *PollUpdate {
	pu.mutation.SetOptions(s)
	return pu
}

// ClearOptions clears the value of the "options" field.
func (pu *PollUpdate) ClearOptions() *PollUpdate {
	pu.mutation.ClearOptions()
	return pu
}

// SetCreatetime sets the "createtime" field.
func (pu *PollUpdate) SetCreatetime(t time.Time) *PollUpdate {
	pu.mutation.SetCreatetime(t)
	return pu
}

// SetNillableCreatetime sets the "createtime" field if the given value is not nil.
func (pu *PollUpdate) SetNillableCreatetime(t *time.Time) *PollUpdate {
	if t != nil {
		pu.SetCreatetime(*t)
	}
	return pu
}

// SetModifytime sets the "modifytime" field.
func (pu *PollUpdate) SetModifytime(t time.Time) *PollUpdate {
	pu.mutation.SetModifytime(t)
	return pu
}

// SetNillableModifytime sets the "modifytime" field if the given value is not nil.
func (pu *PollUpdate) SetNillableModifytime(t *time.Time) *PollUpdate {
	if t != nil {
		pu.SetModifytime(*t)
	}
	return pu
}

// Mutation returns the PollMutation object of the builder.
func (pu *PollUpdate) Mutation() *PollMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PollUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PollMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PollUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PollUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PollUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PollUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   poll.Table,
			Columns: poll.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poll.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Ownerid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: poll.FieldOwnerid,
		})
	}
	if value, ok := pu.mutation.AddedOwnerid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: poll.FieldOwnerid,
		})
	}
	if value, ok := pu.mutation.Topic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: poll.FieldTopic,
		})
	}
	if value, ok := pu.mutation.Options(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: poll.FieldOptions,
		})
	}
	if pu.mutation.OptionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: poll.FieldOptions,
		})
	}
	if value, ok := pu.mutation.Createtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: poll.FieldCreatetime,
		})
	}
	if value, ok := pu.mutation.Modifytime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: poll.FieldModifytime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PollUpdateOne is the builder for updating a single Poll entity.
type PollUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PollMutation
}

// SetOwnerid sets the "ownerid" field.
func (puo *PollUpdateOne) SetOwnerid(i int) *PollUpdateOne {
	puo.mutation.ResetOwnerid()
	puo.mutation.SetOwnerid(i)
	return puo
}

// SetNillableOwnerid sets the "ownerid" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableOwnerid(i *int) *PollUpdateOne {
	if i != nil {
		puo.SetOwnerid(*i)
	}
	return puo
}

// AddOwnerid adds i to the "ownerid" field.
func (puo *PollUpdateOne) AddOwnerid(i int) *PollUpdateOne {
	puo.mutation.AddOwnerid(i)
	return puo
}

// SetTopic sets the "topic" field.
func (puo *PollUpdateOne) SetTopic(s string) *PollUpdateOne {
	puo.mutation.SetTopic(s)
	return puo
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableTopic(s *string) *PollUpdateOne {
	if s != nil {
		puo.SetTopic(*s)
	}
	return puo
}

// SetOptions sets the "options" field.
func (puo *PollUpdateOne) SetOptions(s []string) *PollUpdateOne {
	puo.mutation.SetOptions(s)
	return puo
}

// ClearOptions clears the value of the "options" field.
func (puo *PollUpdateOne) ClearOptions() *PollUpdateOne {
	puo.mutation.ClearOptions()
	return puo
}

// SetCreatetime sets the "createtime" field.
func (puo *PollUpdateOne) SetCreatetime(t time.Time) *PollUpdateOne {
	puo.mutation.SetCreatetime(t)
	return puo
}

// SetNillableCreatetime sets the "createtime" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableCreatetime(t *time.Time) *PollUpdateOne {
	if t != nil {
		puo.SetCreatetime(*t)
	}
	return puo
}

// SetModifytime sets the "modifytime" field.
func (puo *PollUpdateOne) SetModifytime(t time.Time) *PollUpdateOne {
	puo.mutation.SetModifytime(t)
	return puo
}

// SetNillableModifytime sets the "modifytime" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableModifytime(t *time.Time) *PollUpdateOne {
	if t != nil {
		puo.SetModifytime(*t)
	}
	return puo
}

// Mutation returns the PollMutation object of the builder.
func (puo *PollUpdateOne) Mutation() *PollMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PollUpdateOne) Select(field string, fields ...string) *PollUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Poll entity.
func (puo *PollUpdateOne) Save(ctx context.Context) (*Poll, error) {
	var (
		err  error
		node *Poll
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PollMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PollUpdateOne) SaveX(ctx context.Context) *Poll {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PollUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PollUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PollUpdateOne) sqlSave(ctx context.Context) (_node *Poll, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   poll.Table,
			Columns: poll.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poll.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Poll.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, poll.FieldID)
		for _, f := range fields {
			if !poll.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != poll.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Ownerid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: poll.FieldOwnerid,
		})
	}
	if value, ok := puo.mutation.AddedOwnerid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: poll.FieldOwnerid,
		})
	}
	if value, ok := puo.mutation.Topic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: poll.FieldTopic,
		})
	}
	if value, ok := puo.mutation.Options(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: poll.FieldOptions,
		})
	}
	if puo.mutation.OptionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: poll.FieldOptions,
		})
	}
	if value, ok := puo.mutation.Createtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: poll.FieldCreatetime,
		})
	}
	if value, ok := puo.mutation.Modifytime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: poll.FieldModifytime,
		})
	}
	_node = &Poll{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
