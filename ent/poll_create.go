// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"voting-app/ent/poll"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PollCreate is the builder for creating a Poll entity.
type PollCreate struct {
	config
	mutation *PollMutation
	hooks    []Hook
}

// SetOwnerid sets the "ownerid" field.
func (pc *PollCreate) SetOwnerid(i int) *PollCreate {
	pc.mutation.SetOwnerid(i)
	return pc
}

// SetNillableOwnerid sets the "ownerid" field if the given value is not nil.
func (pc *PollCreate) SetNillableOwnerid(i *int) *PollCreate {
	if i != nil {
		pc.SetOwnerid(*i)
	}
	return pc
}

// SetTopic sets the "topic" field.
func (pc *PollCreate) SetTopic(s string) *PollCreate {
	pc.mutation.SetTopic(s)
	return pc
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (pc *PollCreate) SetNillableTopic(s *string) *PollCreate {
	if s != nil {
		pc.SetTopic(*s)
	}
	return pc
}

// SetOptions sets the "options" field.
func (pc *PollCreate) SetOptions(s []string) *PollCreate {
	pc.mutation.SetOptions(s)
	return pc
}

// SetCreatetime sets the "createtime" field.
func (pc *PollCreate) SetCreatetime(t time.Time) *PollCreate {
	pc.mutation.SetCreatetime(t)
	return pc
}

// SetNillableCreatetime sets the "createtime" field if the given value is not nil.
func (pc *PollCreate) SetNillableCreatetime(t *time.Time) *PollCreate {
	if t != nil {
		pc.SetCreatetime(*t)
	}
	return pc
}

// SetModifytime sets the "modifytime" field.
func (pc *PollCreate) SetModifytime(t time.Time) *PollCreate {
	pc.mutation.SetModifytime(t)
	return pc
}

// SetNillableModifytime sets the "modifytime" field if the given value is not nil.
func (pc *PollCreate) SetNillableModifytime(t *time.Time) *PollCreate {
	if t != nil {
		pc.SetModifytime(*t)
	}
	return pc
}

// Mutation returns the PollMutation object of the builder.
func (pc *PollCreate) Mutation() *PollMutation {
	return pc.mutation
}

// Save creates the Poll in the database.
func (pc *PollCreate) Save(ctx context.Context) (*Poll, error) {
	var (
		err  error
		node *Poll
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PollMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PollCreate) SaveX(ctx context.Context) *Poll {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PollCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PollCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PollCreate) defaults() {
	if _, ok := pc.mutation.Ownerid(); !ok {
		v := poll.DefaultOwnerid
		pc.mutation.SetOwnerid(v)
	}
	if _, ok := pc.mutation.Topic(); !ok {
		v := poll.DefaultTopic
		pc.mutation.SetTopic(v)
	}
	if _, ok := pc.mutation.Createtime(); !ok {
		v := poll.DefaultCreatetime()
		pc.mutation.SetCreatetime(v)
	}
	if _, ok := pc.mutation.Modifytime(); !ok {
		v := poll.DefaultModifytime()
		pc.mutation.SetModifytime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PollCreate) check() error {
	if _, ok := pc.mutation.Ownerid(); !ok {
		return &ValidationError{Name: "ownerid", err: errors.New(`ent: missing required field "ownerid"`)}
	}
	if _, ok := pc.mutation.Topic(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required field "topic"`)}
	}
	if _, ok := pc.mutation.Createtime(); !ok {
		return &ValidationError{Name: "createtime", err: errors.New(`ent: missing required field "createtime"`)}
	}
	if _, ok := pc.mutation.Modifytime(); !ok {
		return &ValidationError{Name: "modifytime", err: errors.New(`ent: missing required field "modifytime"`)}
	}
	return nil
}

func (pc *PollCreate) sqlSave(ctx context.Context) (*Poll, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PollCreate) createSpec() (*Poll, *sqlgraph.CreateSpec) {
	var (
		_node = &Poll{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: poll.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poll.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Ownerid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: poll.FieldOwnerid,
		})
		_node.Ownerid = value
	}
	if value, ok := pc.mutation.Topic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: poll.FieldTopic,
		})
		_node.Topic = value
	}
	if value, ok := pc.mutation.Options(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: poll.FieldOptions,
		})
		_node.Options = value
	}
	if value, ok := pc.mutation.Createtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: poll.FieldCreatetime,
		})
		_node.Createtime = value
	}
	if value, ok := pc.mutation.Modifytime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: poll.FieldModifytime,
		})
		_node.Modifytime = value
	}
	return _node, _spec
}

// PollCreateBulk is the builder for creating many Poll entities in bulk.
type PollCreateBulk struct {
	config
	builders []*PollCreate
}

// Save creates the Poll entities in the database.
func (pcb *PollCreateBulk) Save(ctx context.Context) ([]*Poll, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Poll, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PollMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PollCreateBulk) SaveX(ctx context.Context) []*Poll {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PollCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PollCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
