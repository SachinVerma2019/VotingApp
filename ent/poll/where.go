// Code generated by entc, DO NOT EDIT.

package poll

import (
	"time"
	"voting-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Ownerid applies equality check predicate on the "ownerid" field. It's identical to OwneridEQ.
func Ownerid(v int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerid), v))
	})
}

// Topic applies equality check predicate on the "topic" field. It's identical to TopicEQ.
func Topic(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopic), v))
	})
}

// Createtime applies equality check predicate on the "createtime" field. It's identical to CreatetimeEQ.
func Createtime(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatetime), v))
	})
}

// Modifytime applies equality check predicate on the "modifytime" field. It's identical to ModifytimeEQ.
func Modifytime(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModifytime), v))
	})
}

// OwneridEQ applies the EQ predicate on the "ownerid" field.
func OwneridEQ(v int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerid), v))
	})
}

// OwneridNEQ applies the NEQ predicate on the "ownerid" field.
func OwneridNEQ(v int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerid), v))
	})
}

// OwneridIn applies the In predicate on the "ownerid" field.
func OwneridIn(vs ...int) predicate.Poll {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOwnerid), v...))
	})
}

// OwneridNotIn applies the NotIn predicate on the "ownerid" field.
func OwneridNotIn(vs ...int) predicate.Poll {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOwnerid), v...))
	})
}

// OwneridGT applies the GT predicate on the "ownerid" field.
func OwneridGT(v int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerid), v))
	})
}

// OwneridGTE applies the GTE predicate on the "ownerid" field.
func OwneridGTE(v int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerid), v))
	})
}

// OwneridLT applies the LT predicate on the "ownerid" field.
func OwneridLT(v int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerid), v))
	})
}

// OwneridLTE applies the LTE predicate on the "ownerid" field.
func OwneridLTE(v int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerid), v))
	})
}

// TopicEQ applies the EQ predicate on the "topic" field.
func TopicEQ(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopic), v))
	})
}

// TopicNEQ applies the NEQ predicate on the "topic" field.
func TopicNEQ(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTopic), v))
	})
}

// TopicIn applies the In predicate on the "topic" field.
func TopicIn(vs ...string) predicate.Poll {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTopic), v...))
	})
}

// TopicNotIn applies the NotIn predicate on the "topic" field.
func TopicNotIn(vs ...string) predicate.Poll {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTopic), v...))
	})
}

// TopicGT applies the GT predicate on the "topic" field.
func TopicGT(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTopic), v))
	})
}

// TopicGTE applies the GTE predicate on the "topic" field.
func TopicGTE(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTopic), v))
	})
}

// TopicLT applies the LT predicate on the "topic" field.
func TopicLT(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTopic), v))
	})
}

// TopicLTE applies the LTE predicate on the "topic" field.
func TopicLTE(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTopic), v))
	})
}

// TopicContains applies the Contains predicate on the "topic" field.
func TopicContains(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTopic), v))
	})
}

// TopicHasPrefix applies the HasPrefix predicate on the "topic" field.
func TopicHasPrefix(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTopic), v))
	})
}

// TopicHasSuffix applies the HasSuffix predicate on the "topic" field.
func TopicHasSuffix(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTopic), v))
	})
}

// TopicEqualFold applies the EqualFold predicate on the "topic" field.
func TopicEqualFold(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTopic), v))
	})
}

// TopicContainsFold applies the ContainsFold predicate on the "topic" field.
func TopicContainsFold(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTopic), v))
	})
}

// OptionsIsNil applies the IsNil predicate on the "options" field.
func OptionsIsNil() predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOptions)))
	})
}

// OptionsNotNil applies the NotNil predicate on the "options" field.
func OptionsNotNil() predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOptions)))
	})
}

// CreatetimeEQ applies the EQ predicate on the "createtime" field.
func CreatetimeEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatetime), v))
	})
}

// CreatetimeNEQ applies the NEQ predicate on the "createtime" field.
func CreatetimeNEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatetime), v))
	})
}

// CreatetimeIn applies the In predicate on the "createtime" field.
func CreatetimeIn(vs ...time.Time) predicate.Poll {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatetime), v...))
	})
}

// CreatetimeNotIn applies the NotIn predicate on the "createtime" field.
func CreatetimeNotIn(vs ...time.Time) predicate.Poll {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatetime), v...))
	})
}

// CreatetimeGT applies the GT predicate on the "createtime" field.
func CreatetimeGT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatetime), v))
	})
}

// CreatetimeGTE applies the GTE predicate on the "createtime" field.
func CreatetimeGTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatetime), v))
	})
}

// CreatetimeLT applies the LT predicate on the "createtime" field.
func CreatetimeLT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatetime), v))
	})
}

// CreatetimeLTE applies the LTE predicate on the "createtime" field.
func CreatetimeLTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatetime), v))
	})
}

// ModifytimeEQ applies the EQ predicate on the "modifytime" field.
func ModifytimeEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModifytime), v))
	})
}

// ModifytimeNEQ applies the NEQ predicate on the "modifytime" field.
func ModifytimeNEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModifytime), v))
	})
}

// ModifytimeIn applies the In predicate on the "modifytime" field.
func ModifytimeIn(vs ...time.Time) predicate.Poll {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModifytime), v...))
	})
}

// ModifytimeNotIn applies the NotIn predicate on the "modifytime" field.
func ModifytimeNotIn(vs ...time.Time) predicate.Poll {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModifytime), v...))
	})
}

// ModifytimeGT applies the GT predicate on the "modifytime" field.
func ModifytimeGT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModifytime), v))
	})
}

// ModifytimeGTE applies the GTE predicate on the "modifytime" field.
func ModifytimeGTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModifytime), v))
	})
}

// ModifytimeLT applies the LT predicate on the "modifytime" field.
func ModifytimeLT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModifytime), v))
	})
}

// ModifytimeLTE applies the LTE predicate on the "modifytime" field.
func ModifytimeLTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModifytime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Poll) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Poll) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Poll) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		p(s.Not())
	})
}
