// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"voting-app/ent/result"

	"entgo.io/ent/dialect/sql"
)

// Result is the model entity for the Result schema.
type Result struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Userid holds the value of the "userid" field.
	Userid int `json:"userid,omitempty"`
	// Pollid holds the value of the "pollid" field.
	Pollid int `json:"pollid,omitempty"`
	// Option holds the value of the "option" field.
	Option string `json:"option,omitempty"`
	// Createtime holds the value of the "createtime" field.
	Createtime time.Time `json:"createtime,omitempty"`
	// Modifytime holds the value of the "modifytime" field.
	Modifytime time.Time `json:"modifytime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Result) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case result.FieldID, result.FieldUserid, result.FieldPollid:
			values[i] = new(sql.NullInt64)
		case result.FieldOption:
			values[i] = new(sql.NullString)
		case result.FieldCreatetime, result.FieldModifytime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Result", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Result fields.
func (r *Result) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case result.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case result.FieldUserid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userid", values[i])
			} else if value.Valid {
				r.Userid = int(value.Int64)
			}
		case result.FieldPollid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pollid", values[i])
			} else if value.Valid {
				r.Pollid = int(value.Int64)
			}
		case result.FieldOption:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field option", values[i])
			} else if value.Valid {
				r.Option = value.String
			}
		case result.FieldCreatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createtime", values[i])
			} else if value.Valid {
				r.Createtime = value.Time
			}
		case result.FieldModifytime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modifytime", values[i])
			} else if value.Valid {
				r.Modifytime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Result.
// Note that you need to call Result.Unwrap() before calling this method if this Result
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Result) Update() *ResultUpdateOne {
	return (&ResultClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Result entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Result) Unwrap() *Result {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Result is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Result) String() string {
	var builder strings.Builder
	builder.WriteString("Result(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", userid=")
	builder.WriteString(fmt.Sprintf("%v", r.Userid))
	builder.WriteString(", pollid=")
	builder.WriteString(fmt.Sprintf("%v", r.Pollid))
	builder.WriteString(", option=")
	builder.WriteString(r.Option)
	builder.WriteString(", createtime=")
	builder.WriteString(r.Createtime.Format(time.ANSIC))
	builder.WriteString(", modifytime=")
	builder.WriteString(r.Modifytime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Results is a parsable slice of Result.
type Results []*Result

func (r Results) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
