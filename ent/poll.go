// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
	"voting-app/ent/poll"

	"entgo.io/ent/dialect/sql"
)

// Poll is the model entity for the Poll schema.
type Poll struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Ownerid holds the value of the "ownerid" field.
	Ownerid int `json:"ownerid,omitempty"`
	// Topic holds the value of the "topic" field.
	Topic string `json:"topic,omitempty"`
	// Options holds the value of the "options" field.
	Options []string `json:"options,omitempty"`
	// Createtime holds the value of the "createtime" field.
	Createtime time.Time `json:"createtime,omitempty"`
	// Modifytime holds the value of the "modifytime" field.
	Modifytime time.Time `json:"modifytime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Poll) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case poll.FieldOptions:
			values[i] = new([]byte)
		case poll.FieldID, poll.FieldOwnerid:
			values[i] = new(sql.NullInt64)
		case poll.FieldTopic:
			values[i] = new(sql.NullString)
		case poll.FieldCreatetime, poll.FieldModifytime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Poll", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Poll fields.
func (po *Poll) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case poll.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case poll.FieldOwnerid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ownerid", values[i])
			} else if value.Valid {
				po.Ownerid = int(value.Int64)
			}
		case poll.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				po.Topic = value.String
			}
		case poll.FieldOptions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field options", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Options); err != nil {
					return fmt.Errorf("unmarshal field options: %w", err)
				}
			}
		case poll.FieldCreatetime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createtime", values[i])
			} else if value.Valid {
				po.Createtime = value.Time
			}
		case poll.FieldModifytime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modifytime", values[i])
			} else if value.Valid {
				po.Modifytime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Poll.
// Note that you need to call Poll.Unwrap() before calling this method if this Poll
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Poll) Update() *PollUpdateOne {
	return (&PollClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Poll entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Poll) Unwrap() *Poll {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Poll is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Poll) String() string {
	var builder strings.Builder
	builder.WriteString("Poll(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", ownerid=")
	builder.WriteString(fmt.Sprintf("%v", po.Ownerid))
	builder.WriteString(", topic=")
	builder.WriteString(po.Topic)
	builder.WriteString(", options=")
	builder.WriteString(fmt.Sprintf("%v", po.Options))
	builder.WriteString(", createtime=")
	builder.WriteString(po.Createtime.Format(time.ANSIC))
	builder.WriteString(", modifytime=")
	builder.WriteString(po.Modifytime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Polls is a parsable slice of Poll.
type Polls []*Poll

func (po Polls) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
