// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"voting-app/ent/migrate"

	"voting-app/ent/poll"
	"voting-app/ent/result"
	"voting-app/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Poll is the client for interacting with the Poll builders.
	Poll *PollClient
	// Result is the client for interacting with the Result builders.
	Result *ResultClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Poll = NewPollClient(c.config)
	c.Result = NewResultClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		Poll:   NewPollClient(cfg),
		Result: NewResultClient(cfg),
		User:   NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config: cfg,
		Poll:   NewPollClient(cfg),
		Result: NewResultClient(cfg),
		User:   NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Poll.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Poll.Use(hooks...)
	c.Result.Use(hooks...)
	c.User.Use(hooks...)
}

// PollClient is a client for the Poll schema.
type PollClient struct {
	config
}

// NewPollClient returns a client for the Poll from the given config.
func NewPollClient(c config) *PollClient {
	return &PollClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `poll.Hooks(f(g(h())))`.
func (c *PollClient) Use(hooks ...Hook) {
	c.hooks.Poll = append(c.hooks.Poll, hooks...)
}

// Create returns a create builder for Poll.
func (c *PollClient) Create() *PollCreate {
	mutation := newPollMutation(c.config, OpCreate)
	return &PollCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Poll entities.
func (c *PollClient) CreateBulk(builders ...*PollCreate) *PollCreateBulk {
	return &PollCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Poll.
func (c *PollClient) Update() *PollUpdate {
	mutation := newPollMutation(c.config, OpUpdate)
	return &PollUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PollClient) UpdateOne(po *Poll) *PollUpdateOne {
	mutation := newPollMutation(c.config, OpUpdateOne, withPoll(po))
	return &PollUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PollClient) UpdateOneID(id int) *PollUpdateOne {
	mutation := newPollMutation(c.config, OpUpdateOne, withPollID(id))
	return &PollUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Poll.
func (c *PollClient) Delete() *PollDelete {
	mutation := newPollMutation(c.config, OpDelete)
	return &PollDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PollClient) DeleteOne(po *Poll) *PollDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PollClient) DeleteOneID(id int) *PollDeleteOne {
	builder := c.Delete().Where(poll.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PollDeleteOne{builder}
}

// Query returns a query builder for Poll.
func (c *PollClient) Query() *PollQuery {
	return &PollQuery{
		config: c.config,
	}
}

// Get returns a Poll entity by its id.
func (c *PollClient) Get(ctx context.Context, id int) (*Poll, error) {
	return c.Query().Where(poll.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PollClient) GetX(ctx context.Context, id int) *Poll {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PollClient) Hooks() []Hook {
	return c.hooks.Poll
}

// ResultClient is a client for the Result schema.
type ResultClient struct {
	config
}

// NewResultClient returns a client for the Result from the given config.
func NewResultClient(c config) *ResultClient {
	return &ResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `result.Hooks(f(g(h())))`.
func (c *ResultClient) Use(hooks ...Hook) {
	c.hooks.Result = append(c.hooks.Result, hooks...)
}

// Create returns a create builder for Result.
func (c *ResultClient) Create() *ResultCreate {
	mutation := newResultMutation(c.config, OpCreate)
	return &ResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Result entities.
func (c *ResultClient) CreateBulk(builders ...*ResultCreate) *ResultCreateBulk {
	return &ResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Result.
func (c *ResultClient) Update() *ResultUpdate {
	mutation := newResultMutation(c.config, OpUpdate)
	return &ResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResultClient) UpdateOne(r *Result) *ResultUpdateOne {
	mutation := newResultMutation(c.config, OpUpdateOne, withResult(r))
	return &ResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResultClient) UpdateOneID(id int) *ResultUpdateOne {
	mutation := newResultMutation(c.config, OpUpdateOne, withResultID(id))
	return &ResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Result.
func (c *ResultClient) Delete() *ResultDelete {
	mutation := newResultMutation(c.config, OpDelete)
	return &ResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ResultClient) DeleteOne(r *Result) *ResultDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ResultClient) DeleteOneID(id int) *ResultDeleteOne {
	builder := c.Delete().Where(result.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResultDeleteOne{builder}
}

// Query returns a query builder for Result.
func (c *ResultClient) Query() *ResultQuery {
	return &ResultQuery{
		config: c.config,
	}
}

// Get returns a Result entity by its id.
func (c *ResultClient) Get(ctx context.Context, id int) (*Result, error) {
	return c.Query().Where(result.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResultClient) GetX(ctx context.Context, id int) *Result {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ResultClient) Hooks() []Hook {
	return c.hooks.Result
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
