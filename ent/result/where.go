// Code generated by entc, DO NOT EDIT.

package result

import (
	"time"
	"voting-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Userid applies equality check predicate on the "userid" field. It's identical to UseridEQ.
func Userid(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserid), v))
	})
}

// Pollid applies equality check predicate on the "pollid" field. It's identical to PollidEQ.
func Pollid(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPollid), v))
	})
}

// Option applies equality check predicate on the "option" field. It's identical to OptionEQ.
func Option(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOption), v))
	})
}

// Createtime applies equality check predicate on the "createtime" field. It's identical to CreatetimeEQ.
func Createtime(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatetime), v))
	})
}

// Modifytime applies equality check predicate on the "modifytime" field. It's identical to ModifytimeEQ.
func Modifytime(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModifytime), v))
	})
}

// UseridEQ applies the EQ predicate on the "userid" field.
func UseridEQ(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserid), v))
	})
}

// UseridNEQ applies the NEQ predicate on the "userid" field.
func UseridNEQ(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserid), v))
	})
}

// UseridIn applies the In predicate on the "userid" field.
func UseridIn(vs ...int) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserid), v...))
	})
}

// UseridNotIn applies the NotIn predicate on the "userid" field.
func UseridNotIn(vs ...int) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserid), v...))
	})
}

// UseridGT applies the GT predicate on the "userid" field.
func UseridGT(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserid), v))
	})
}

// UseridGTE applies the GTE predicate on the "userid" field.
func UseridGTE(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserid), v))
	})
}

// UseridLT applies the LT predicate on the "userid" field.
func UseridLT(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserid), v))
	})
}

// UseridLTE applies the LTE predicate on the "userid" field.
func UseridLTE(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserid), v))
	})
}

// PollidEQ applies the EQ predicate on the "pollid" field.
func PollidEQ(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPollid), v))
	})
}

// PollidNEQ applies the NEQ predicate on the "pollid" field.
func PollidNEQ(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPollid), v))
	})
}

// PollidIn applies the In predicate on the "pollid" field.
func PollidIn(vs ...int) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPollid), v...))
	})
}

// PollidNotIn applies the NotIn predicate on the "pollid" field.
func PollidNotIn(vs ...int) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPollid), v...))
	})
}

// PollidGT applies the GT predicate on the "pollid" field.
func PollidGT(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPollid), v))
	})
}

// PollidGTE applies the GTE predicate on the "pollid" field.
func PollidGTE(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPollid), v))
	})
}

// PollidLT applies the LT predicate on the "pollid" field.
func PollidLT(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPollid), v))
	})
}

// PollidLTE applies the LTE predicate on the "pollid" field.
func PollidLTE(v int) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPollid), v))
	})
}

// OptionEQ applies the EQ predicate on the "option" field.
func OptionEQ(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOption), v))
	})
}

// OptionNEQ applies the NEQ predicate on the "option" field.
func OptionNEQ(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOption), v))
	})
}

// OptionIn applies the In predicate on the "option" field.
func OptionIn(vs ...string) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOption), v...))
	})
}

// OptionNotIn applies the NotIn predicate on the "option" field.
func OptionNotIn(vs ...string) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOption), v...))
	})
}

// OptionGT applies the GT predicate on the "option" field.
func OptionGT(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOption), v))
	})
}

// OptionGTE applies the GTE predicate on the "option" field.
func OptionGTE(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOption), v))
	})
}

// OptionLT applies the LT predicate on the "option" field.
func OptionLT(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOption), v))
	})
}

// OptionLTE applies the LTE predicate on the "option" field.
func OptionLTE(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOption), v))
	})
}

// OptionContains applies the Contains predicate on the "option" field.
func OptionContains(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOption), v))
	})
}

// OptionHasPrefix applies the HasPrefix predicate on the "option" field.
func OptionHasPrefix(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOption), v))
	})
}

// OptionHasSuffix applies the HasSuffix predicate on the "option" field.
func OptionHasSuffix(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOption), v))
	})
}

// OptionEqualFold applies the EqualFold predicate on the "option" field.
func OptionEqualFold(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOption), v))
	})
}

// OptionContainsFold applies the ContainsFold predicate on the "option" field.
func OptionContainsFold(v string) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOption), v))
	})
}

// CreatetimeEQ applies the EQ predicate on the "createtime" field.
func CreatetimeEQ(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatetime), v))
	})
}

// CreatetimeNEQ applies the NEQ predicate on the "createtime" field.
func CreatetimeNEQ(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatetime), v))
	})
}

// CreatetimeIn applies the In predicate on the "createtime" field.
func CreatetimeIn(vs ...time.Time) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatetime), v...))
	})
}

// CreatetimeNotIn applies the NotIn predicate on the "createtime" field.
func CreatetimeNotIn(vs ...time.Time) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatetime), v...))
	})
}

// CreatetimeGT applies the GT predicate on the "createtime" field.
func CreatetimeGT(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatetime), v))
	})
}

// CreatetimeGTE applies the GTE predicate on the "createtime" field.
func CreatetimeGTE(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatetime), v))
	})
}

// CreatetimeLT applies the LT predicate on the "createtime" field.
func CreatetimeLT(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatetime), v))
	})
}

// CreatetimeLTE applies the LTE predicate on the "createtime" field.
func CreatetimeLTE(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatetime), v))
	})
}

// ModifytimeEQ applies the EQ predicate on the "modifytime" field.
func ModifytimeEQ(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModifytime), v))
	})
}

// ModifytimeNEQ applies the NEQ predicate on the "modifytime" field.
func ModifytimeNEQ(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModifytime), v))
	})
}

// ModifytimeIn applies the In predicate on the "modifytime" field.
func ModifytimeIn(vs ...time.Time) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModifytime), v...))
	})
}

// ModifytimeNotIn applies the NotIn predicate on the "modifytime" field.
func ModifytimeNotIn(vs ...time.Time) predicate.Result {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Result(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModifytime), v...))
	})
}

// ModifytimeGT applies the GT predicate on the "modifytime" field.
func ModifytimeGT(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModifytime), v))
	})
}

// ModifytimeGTE applies the GTE predicate on the "modifytime" field.
func ModifytimeGTE(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModifytime), v))
	})
}

// ModifytimeLT applies the LT predicate on the "modifytime" field.
func ModifytimeLT(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModifytime), v))
	})
}

// ModifytimeLTE applies the LTE predicate on the "modifytime" field.
func ModifytimeLTE(v time.Time) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModifytime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Result) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Result) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Result) predicate.Result {
	return predicate.Result(func(s *sql.Selector) {
		p(s.Not())
	})
}
